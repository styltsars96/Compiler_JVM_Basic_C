/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Lazaros/Documents/NetBeansProjects/compiler/src/main/jflex/lexer.flex</tt>
 */
public final class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\3\1\2\1\21\1\22\1\1\16\13\4\0\1\17\1\52"+
    "\1\46\1\0\1\12\1\54\1\55\1\15\1\64\1\65\1\5\1\53"+
    "\1\66\1\7\1\11\1\4\1\14\11\10\1\0\1\63\1\51\1\47"+
    "\1\50\2\0\4\12\1\6\25\12\1\61\1\16\1\62\1\0\1\12"+
    "\1\0\1\33\1\44\1\34\1\40\1\37\1\30\1\12\1\35\1\26"+
    "\1\12\1\45\1\31\1\12\1\27\1\32\1\24\1\12\1\25\1\41"+
    "\1\20\1\43\1\42\1\36\3\12\1\57\1\56\1\60\1\0\6\13"+
    "\1\23\32\13\2\0\4\12\4\0\1\12\2\0\1\13\7\0\1\12"+
    "\4\0\1\12\5\0\27\12\1\0\37\12\1\0\u01ca\12\4\0\14\12"+
    "\16\0\5\12\7\0\1\12\1\0\1\12\21\0\160\13\5\12\1\0"+
    "\2\12\2\0\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0"+
    "\24\12\1\0\123\12\1\0\213\12\1\0\5\13\2\0\236\12\11\0"+
    "\46\12\2\0\1\12\7\0\47\12\7\0\1\12\1\0\55\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\1\13\10\0\33\12\5\0"+
    "\3\12\15\0\5\13\6\0\1\12\4\0\13\13\5\0\53\12\37\13"+
    "\4\0\2\12\1\13\143\12\1\0\1\12\10\13\1\0\6\13\2\12"+
    "\2\13\1\0\4\13\2\12\12\13\3\12\2\0\1\12\17\0\1\13"+
    "\1\12\1\13\36\12\33\13\2\0\131\12\13\13\1\12\16\0\12\13"+
    "\41\12\11\13\2\12\4\0\1\12\5\0\26\12\4\13\1\12\11\13"+
    "\1\12\3\13\1\12\5\13\22\0\31\12\3\13\104\0\1\12\1\0"+
    "\13\12\67\0\33\13\1\0\4\13\66\12\3\13\1\12\22\13\1\12"+
    "\7\13\12\12\2\13\2\0\12\13\1\0\7\12\1\0\7\12\1\0"+
    "\3\13\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\1\12\3\0\4\12\2\0\1\13\1\12\7\13\2\0\2\13\2\0"+
    "\3\13\1\12\10\0\1\13\4\0\2\12\1\0\3\12\2\13\2\0"+
    "\12\13\4\12\7\0\1\12\5\0\3\13\1\0\6\12\4\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12"+
    "\2\0\1\13\1\0\5\13\4\0\2\13\2\0\3\13\3\0\1\13"+
    "\7\0\4\12\1\0\1\12\7\0\14\13\3\12\1\13\13\0\3\13"+
    "\1\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0\2\12"+
    "\1\0\5\12\2\0\1\13\1\12\10\13\1\0\3\13\1\0\3\13"+
    "\2\0\1\12\17\0\2\12\2\13\2\0\12\13\1\0\1\12\17\0"+
    "\3\13\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\2\0\1\13\1\12\7\13\2\0\2\13\2\0"+
    "\3\13\10\0\2\13\4\0\2\12\1\0\3\12\2\13\2\0\12\13"+
    "\1\0\1\12\20\0\1\13\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\4\0\5\13\3\0\3\13\1\0\4\13\2\0"+
    "\1\12\6\0\1\13\16\0\12\13\11\0\1\12\7\0\3\13\1\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0"+
    "\1\12\7\13\1\0\3\13\1\0\4\13\7\0\2\13\1\0\2\12"+
    "\6\0\2\12\2\13\2\0\12\13\22\0\2\13\1\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\2\0\1\13\1\12"+
    "\7\13\1\0\3\13\1\0\4\13\7\0\2\13\7\0\1\12\1\0"+
    "\2\12\2\13\2\0\12\13\1\0\2\12\17\0\2\13\1\0\10\12"+
    "\1\0\3\12\1\0\51\12\2\0\1\12\7\13\1\0\3\13\1\0"+
    "\4\13\1\12\10\0\1\13\10\0\2\12\2\13\2\0\12\13\12\0"+
    "\6\12\2\0\2\13\1\0\22\12\3\0\30\12\1\0\11\12\1\0"+
    "\1\12\2\0\7\12\3\0\1\13\4\0\6\13\1\0\1\13\1\0"+
    "\10\13\22\0\2\13\15\0\60\12\1\13\2\12\7\13\4\0\10\12"+
    "\10\13\1\0\12\13\47\0\2\12\1\0\1\12\2\0\2\12\1\0"+
    "\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0"+
    "\1\12\1\0\1\12\2\0\2\12\1\0\4\12\1\13\2\12\6\13"+
    "\1\0\2\13\1\12\2\0\5\12\1\0\1\12\1\0\6\13\2\0"+
    "\12\13\2\0\4\12\40\0\1\12\27\0\2\13\6\0\12\13\13\0"+
    "\1\13\1\0\1\13\1\0\1\13\4\0\2\13\10\12\1\0\44\12"+
    "\4\0\24\13\1\0\2\13\5\12\13\13\1\0\44\13\11\0\1\13"+
    "\71\0\53\12\24\13\1\12\12\13\6\0\6\12\4\13\4\12\3\13"+
    "\1\12\3\13\2\12\7\13\3\12\4\13\15\12\14\13\1\12\17\13"+
    "\2\0\46\12\1\0\1\12\5\0\1\12\2\0\53\12\1\0\u014d\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\51\12"+
    "\1\0\4\12\2\0\41\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\17\12\1\0\71\12\1\0\4\12\2\0\103\12"+
    "\2\0\3\13\40\0\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12"+
    "\1\0\32\12\5\0\113\12\3\0\3\12\17\0\15\12\1\0\4\12"+
    "\3\13\13\0\22\12\3\13\13\0\22\12\2\13\14\0\15\12\1\0"+
    "\3\12\1\0\2\13\14\0\64\12\40\13\3\0\1\12\3\0\2\12"+
    "\1\13\2\0\12\13\41\0\3\13\2\0\12\13\6\0\130\12\10\0"+
    "\51\12\1\13\1\12\5\0\106\12\12\0\35\12\3\0\14\13\4\0"+
    "\14\13\12\0\12\13\36\12\2\0\5\12\13\0\54\12\4\0\21\13"+
    "\7\12\2\13\6\0\12\13\46\0\27\12\5\13\4\0\65\12\12\13"+
    "\1\0\35\13\2\0\13\13\6\0\12\13\15\0\1\12\130\0\5\13"+
    "\57\12\21\13\7\12\4\0\12\13\21\0\11\13\14\0\3\13\36\12"+
    "\15\13\2\12\12\13\54\12\16\13\14\0\44\12\24\13\10\0\12\13"+
    "\3\0\3\12\12\13\44\12\122\0\3\13\1\0\25\13\4\12\1\13"+
    "\4\12\3\13\2\12\11\0\300\12\47\13\25\0\4\13\u0116\12\2\0"+
    "\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0"+
    "\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0"+
    "\15\12\5\0\3\12\1\0\7\12\16\0\5\13\30\0\1\21\1\21"+
    "\5\13\20\0\2\12\23\0\1\12\13\0\5\13\5\0\6\13\1\0"+
    "\1\12\15\0\1\12\20\0\15\12\3\0\33\12\25\0\15\13\4\0"+
    "\1\13\3\0\14\13\21\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\21\0"+
    "\51\12\u0a77\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\13"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\17\0\1\13\27\12\11\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\40\13\57\0\1\12\u01d5\0\3\12\31\0\11\12\6\13\1\0"+
    "\5\12\2\0\5\12\4\0\126\12\2\0\2\13\2\0\3\12\1\0"+
    "\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0"+
    "\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0\56\12\2\0"+
    "\u010d\12\3\0\20\12\12\13\2\12\24\0\57\12\1\13\4\0\12\13"+
    "\1\0\31\12\7\0\1\13\120\12\2\13\45\0\11\12\2\0\147\12"+
    "\2\0\4\12\1\0\4\12\14\0\13\12\115\0\12\12\1\13\3\12"+
    "\1\13\4\12\1\13\27\12\5\13\20\0\1\12\7\0\64\12\14\0"+
    "\2\13\62\12\21\13\13\0\12\13\6\0\22\13\6\12\3\0\1\12"+
    "\4\0\12\13\34\12\10\13\2\0\27\12\15\13\14\0\35\12\3\0"+
    "\4\13\57\12\16\13\16\0\1\12\12\13\46\0\51\12\16\13\11\0"+
    "\3\12\1\13\10\12\2\13\2\0\12\13\6\0\27\12\3\0\1\12"+
    "\1\13\4\0\60\12\1\13\1\12\3\13\2\12\2\13\5\12\2\13"+
    "\1\12\1\13\1\12\30\0\3\12\2\0\13\12\5\13\2\0\3\12"+
    "\2\13\12\0\6\12\2\0\6\12\2\0\6\12\11\0\7\12\1\0"+
    "\7\12\221\0\43\12\10\13\1\0\2\13\2\0\12\13\6\0\u2ba4\12"+
    "\14\0\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12"+
    "\14\0\5\12\5\0\1\12\1\13\12\12\1\0\15\12\1\0\5\12"+
    "\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12"+
    "\22\0\100\12\2\0\66\12\50\0\15\12\3\0\20\13\20\0\7\13"+
    "\14\0\2\12\30\0\3\12\31\0\1\12\6\0\5\12\1\0\207\12"+
    "\2\0\1\13\4\0\1\12\13\0\12\13\7\0\32\12\4\0\1\12"+
    "\1\0\32\12\13\0\131\12\3\0\6\12\2\0\6\12\2\0\6\12"+
    "\2\0\3\12\3\0\2\12\3\0\2\12\22\0\3\13\4\0\14\12"+
    "\1\0\32\12\1\0\23\12\1\0\2\12\1\0\17\12\2\0\16\12"+
    "\42\0\173\12\105\0\65\12\210\0\1\13\202\0\35\12\3\0\61\12"+
    "\57\0\37\12\21\0\33\12\65\0\36\12\2\0\44\12\4\0\10\12"+
    "\1\0\5\12\52\0\236\12\2\0\12\13\u0356\0\6\12\2\0\1\12"+
    "\1\0\54\12\1\0\2\12\3\0\1\12\2\0\27\12\252\0\26\12"+
    "\12\0\32\12\106\0\70\12\6\0\2\12\100\0\1\12\3\13\1\0"+
    "\2\13\5\0\4\13\4\12\1\0\3\12\1\0\33\12\4\0\3\13"+
    "\4\0\1\13\40\0\35\12\203\0\66\12\12\0\26\12\12\0\23\12"+
    "\215\0\111\12\u03b7\0\3\13\65\12\17\13\37\0\12\13\20\0\3\13"+
    "\55\12\13\13\2\0\1\13\22\0\31\12\7\0\12\13\6\0\3\13"+
    "\44\12\16\13\1\0\12\13\100\0\3\13\60\12\16\13\4\12\13\0"+
    "\12\13\u04a6\0\53\12\15\13\10\0\12\13\u0936\0\u036f\12\221\0\143\12"+
    "\u0b9d\0\u042f\12\u33d1\0\u0239\12\u04c7\0\105\12\13\0\1\12\56\13\20\0"+
    "\4\13\15\12\u4060\0\2\12\u2163\0\5\13\3\0\26\13\2\0\7\13"+
    "\36\0\4\13\224\0\3\13\u01bb\0\125\12\1\0\107\12\1\0\2\12"+
    "\2\0\1\12\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12"+
    "\1\0\7\12\1\0\101\12\1\0\4\12\2\0\10\12\1\0\7\12"+
    "\1\0\34\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\7\12"+
    "\1\0\u0154\12\2\0\31\12\1\0\31\12\1\0\37\12\1\0\31\12"+
    "\1\0\37\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12"+
    "\1\0\31\12\1\0\10\12\2\0\62\13\u1600\0\4\12\1\0\33\12"+
    "\1\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12\1\0\4\12"+
    "\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1\0\4\12"+
    "\1\0\1\12\1\0\12\12\1\0\21\12\5\0\3\12\1\0\5\12"+
    "\1\0\21\12\u1144\0\ua6d7\12\51\0\u1035\12\13\0\336\12\u3fe2\0\u021e\12"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\13\36\0\140\13\200\0\360\13\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\7\1\1\13\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\1\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\0"+
    "\1\32\3\0\3\5\1\33\6\5\1\34\2\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\3\0\1\32\1\47\2\5\1\50\1\51\7\5"+
    "\1\0\4\5\1\52\1\5\1\53\1\54\1\5\1\55"+
    "\1\5\1\56\1\5\1\57\1\60\1\61\2\5\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\156\0\334\0\156\0\u0113"+
    "\0\156\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\156\0\u0483\0\u04ba\0\u04f1\0\u0528\0\156\0\156\0\u055f"+
    "\0\u0596\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\u05cd\0\u0604\0\156\0\u063b\0\u0672\0\u06a9\0\u01b8"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u0113\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u0113\0\u093d\0\u0974\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\u09ab\0\u09e2\0\u0a19\0\u0a19\0\156\0\u0a50\0\u0a87"+
    "\0\u0113\0\u0113\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0113\0\u0d52"+
    "\0\u0113\0\u0113\0\u0d89\0\u0113\0\u0dc0\0\u0113\0\u0df7\0\u0113"+
    "\0\u0113\0\u0113\0\u0e2e\0\u0e65\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\10\1\3\1\14\1\15\1\3\1\5\1\10"+
    "\1\3\1\5\1\3\1\16\1\17\1\20\1\21\1\22"+
    "\3\10\1\23\1\10\1\24\1\25\1\26\1\10\1\27"+
    "\1\10\1\30\1\10\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\2\3\13\52\1\53"+
    "\27\52\1\54\20\52\71\0\1\5\71\0\1\55\67\0"+
    "\1\10\1\0\1\10\1\0\3\10\3\0\1\10\2\0"+
    "\23\10\27\0\1\56\1\0\1\12\1\57\2\0\1\12"+
    "\22\0\1\56\37\0\1\57\3\0\1\57\60\0\1\56"+
    "\1\0\1\60\1\57\2\0\1\60\22\0\1\56\27\0"+
    "\1\61\2\0\13\61\1\62\2\61\3\0\43\61\6\0"+
    "\1\10\1\0\1\10\1\0\3\10\3\0\1\10\2\0"+
    "\2\10\1\63\20\10\27\0\1\10\1\0\1\10\1\0"+
    "\3\10\3\0\1\10\2\0\14\10\1\64\6\10\27\0"+
    "\1\10\1\0\1\10\1\0\3\10\3\0\1\10\2\0"+
    "\4\10\1\65\1\66\15\10\27\0\1\10\1\0\1\10"+
    "\1\0\3\10\3\0\1\10\2\0\14\10\1\67\6\10"+
    "\27\0\1\10\1\0\1\10\1\0\3\10\3\0\1\10"+
    "\2\0\6\10\1\70\14\10\27\0\1\10\1\0\1\10"+
    "\1\0\3\10\3\0\1\10\2\0\7\10\1\71\2\10"+
    "\1\72\10\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\10\2\0\12\10\1\73\10\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\3\0\1\10\2\0\6\10"+
    "\1\74\14\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\10\2\0\7\10\1\75\13\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\3\0\1\10\2\0\7\10"+
    "\1\76\13\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\10\2\0\2\10\1\77\20\10\70\0\1\100"+
    "\66\0\1\101\66\0\1\102\66\0\1\103\74\0\1\104"+
    "\67\0\1\105\10\0\1\52\2\0\13\52\1\0\27\52"+
    "\1\0\20\52\14\0\1\106\3\0\1\107\6\0\1\110"+
    "\16\0\1\111\20\0\5\112\1\113\61\112\7\0\1\114"+
    "\1\115\3\0\1\115\36\0\1\114\21\0\1\56\1\0"+
    "\1\57\3\0\1\57\22\0\1\56\44\0\1\116\65\0"+
    "\1\61\1\116\1\0\2\61\6\0\1\61\45\0\1\10"+
    "\1\0\1\10\1\0\3\10\3\0\1\10\2\0\3\10"+
    "\1\117\17\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\120\2\0\23\10\27\0\1\10\1\0\1\10"+
    "\1\0\3\10\3\0\1\121\2\0\23\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\3\0\1\10\2\0\13\10"+
    "\1\122\7\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\10\2\0\7\10\1\123\13\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\3\0\1\10\2\0\4\10"+
    "\1\124\16\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\10\2\0\10\10\1\125\12\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\3\0\1\10\2\0\3\10"+
    "\1\126\17\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\10\2\0\16\10\1\127\4\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\3\0\1\10\2\0\3\10"+
    "\1\130\17\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\10\2\0\14\10\1\131\6\10\21\0\5\112"+
    "\1\132\61\112\4\0\1\5\1\113\71\0\1\115\3\0"+
    "\1\115\60\0\1\10\1\0\1\10\1\0\3\10\3\0"+
    "\1\10\2\0\4\10\1\133\16\10\27\0\1\10\1\0"+
    "\1\10\1\0\3\10\3\0\1\10\2\0\20\10\1\134"+
    "\2\10\27\0\1\10\1\0\1\10\1\0\3\10\3\0"+
    "\1\10\2\0\10\10\1\135\12\10\27\0\1\10\1\0"+
    "\1\10\1\0\3\10\3\0\1\136\2\0\23\10\27\0"+
    "\1\10\1\0\1\10\1\0\3\10\3\0\1\10\2\0"+
    "\2\10\1\137\20\10\27\0\1\10\1\0\1\10\1\0"+
    "\3\10\3\0\1\10\2\0\6\10\1\140\14\10\27\0"+
    "\1\10\1\0\1\10\1\0\3\10\3\0\1\10\2\0"+
    "\14\10\1\141\6\10\27\0\1\10\1\0\1\10\1\0"+
    "\3\10\3\0\1\10\2\0\15\10\1\142\5\10\27\0"+
    "\1\10\1\0\1\10\1\0\3\10\3\0\1\10\2\0"+
    "\10\10\1\143\12\10\21\0\4\112\1\5\1\132\61\112"+
    "\6\0\1\10\1\0\1\10\1\0\3\10\3\0\1\144"+
    "\2\0\23\10\27\0\1\10\1\0\1\10\1\0\3\10"+
    "\3\0\1\10\2\0\2\10\1\145\20\10\27\0\1\10"+
    "\1\0\1\10\1\0\3\10\3\0\1\146\2\0\23\10"+
    "\27\0\1\10\1\0\1\10\1\0\3\10\3\0\1\10"+
    "\2\0\3\10\1\147\17\10\27\0\1\10\1\0\1\10"+
    "\1\0\3\10\3\0\1\10\2\0\14\10\1\150\6\10"+
    "\27\0\1\10\1\0\1\10\1\0\3\10\3\0\1\10"+
    "\2\0\22\10\1\151\27\0\1\10\1\0\1\10\1\0"+
    "\3\10\3\0\1\10\2\0\4\10\1\152\16\10\27\0"+
    "\1\10\1\0\1\10\1\0\3\10\3\0\1\10\2\0"+
    "\4\10\1\153\16\10\27\0\1\10\1\0\1\10\1\0"+
    "\3\10\3\0\1\10\2\0\20\10\1\154\2\10\27\0"+
    "\1\10\1\0\1\10\1\0\3\10\3\0\1\10\2\0"+
    "\14\10\1\155\6\10\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\17\1\1\11\4\1\2\11\2\1\10\11\2\1\1\11"+
    "\2\0\1\1\3\0\15\1\12\11\3\0\1\1\1\11"+
    "\13\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // user custom code
    StringBuffer sb = new StringBuffer();//Hold a String.

    private Symbol createSymbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol createSymbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2860) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return createSymbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException((yyline+1) + ":" + (yycolumn+1) + ": illegal character <"+ yytext()+">");
            }
          case 51: break;
          case 2: 
            { /* ignore */
            }
          case 52: break;
          case 3: 
            { return createSymbol(sym.DIV);
            }
          case 53: break;
          case 4: 
            { return createSymbol(sym.MULTI);
            }
          case 54: break;
          case 5: 
            { return createSymbol(sym.IDENTIFIER, yytext());
            }
          case 55: break;
          case 6: 
            { return createSymbol(sym.MINUS);
            }
          case 56: break;
          case 7: 
            { return createSymbol(sym.INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
          case 57: break;
          case 8: 
            { sb.setLength(0); yybegin(STRING);
            }
          case 58: break;
          case 9: 
            { return createSymbol(sym.EQ);
            }
          case 59: break;
          case 10: 
            { return createSymbol(sym.GREATER);
            }
          case 60: break;
          case 11: 
            { return createSymbol(sym.LESS);
            }
          case 61: break;
          case 12: 
            { return createSymbol(sym.NOT);
            }
          case 62: break;
          case 13: 
            { return createSymbol(sym.PLUS);
            }
          case 63: break;
          case 14: 
            { return createSymbol(sym.MOD);
            }
          case 64: break;
          case 15: 
            { return createSymbol(sym.LCURBRACKET);
            }
          case 65: break;
          case 16: 
            { return createSymbol(sym.RCURBRACKET);
            }
          case 66: break;
          case 17: 
            { return createSymbol(sym.LBRACKET);
            }
          case 67: break;
          case 18: 
            { return createSymbol(sym.RBRACKET);
            }
          case 68: break;
          case 19: 
            { return createSymbol(sym.SEMICOLON);
            }
          case 69: break;
          case 20: 
            { return createSymbol(sym.LPAREN);
            }
          case 70: break;
          case 21: 
            { return createSymbol(sym.RPAREN);
            }
          case 71: break;
          case 22: 
            { return createSymbol(sym.COMMA);
            }
          case 72: break;
          case 23: 
            { sb.append(yytext());
            }
          case 73: break;
          case 24: 
            { sb.append('\\');
            }
          case 74: break;
          case 25: 
            { yybegin(YYINITIAL);
                                     return createSymbol(sym.STRING_LITERAL, sb.toString());
            }
          case 75: break;
          case 26: 
            { return createSymbol(sym.DOUBLE_LITERAL, Double.valueOf(yytext()));
            }
          case 76: break;
          case 27: 
            { return createSymbol(sym.IF);
            }
          case 77: break;
          case 28: 
            { return createSymbol(sym.DO);
            }
          case 78: break;
          case 29: 
            { return createSymbol(sym.EQUAL);
            }
          case 79: break;
          case 30: 
            { return createSymbol(sym.GREATER_EQ);
            }
          case 80: break;
          case 31: 
            { return createSymbol(sym.LESS_EQ);
            }
          case 81: break;
          case 32: 
            { return createSymbol(sym.NOT_EQUAL);
            }
          case 82: break;
          case 33: 
            { return createSymbol(sym.AND);
            }
          case 83: break;
          case 34: 
            { return createSymbol(sym.OR);
            }
          case 84: break;
          case 35: 
            { sb.append('\0');
            }
          case 85: break;
          case 36: 
            { sb.append('\t');
            }
          case 86: break;
          case 37: 
            { sb.append('\n');
            }
          case 87: break;
          case 38: 
            { sb.append('\"');
            }
          case 88: break;
          case 39: 
            { return createSymbol(sym.CHARACTER_LITERAL, yytext().replaceAll("\'", ""));
            }
          case 89: break;
          case 40: 
            { return createSymbol(sym.INT);
            }
          case 90: break;
          case 41: 
            { return createSymbol(sym.NEW);
            }
          case 91: break;
          case 42: 
            { return createSymbol(sym.CHAR);
            }
          case 92: break;
          case 43: 
            { return createSymbol(sym.ELSE);
            }
          case 93: break;
          case 44: 
            { return createSymbol(sym.VOID);
            }
          case 94: break;
          case 45: 
            { return createSymbol(sym.PRINT);
            }
          case 95: break;
          case 46: 
            { return createSymbol(sym.FLOAT);
            }
          case 96: break;
          case 47: 
            { return createSymbol(sym.WHILE);
            }
          case 97: break;
          case 48: 
            { return createSymbol(sym.BREAK);
            }
          case 98: break;
          case 49: 
            { return createSymbol(sym.RETURN);
            }
          case 99: break;
          case 50: 
            { return createSymbol(sym.CONTINUE);
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
